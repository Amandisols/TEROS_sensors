theme_minimal()+
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA)
)
ggsave(filename = paste0("plots/battery_percentage_plot_",i,".png"), plot = p)
}
}
plot_battery_percentage(dfList)
dflist[1]
dfList[1]
dflist[1]
dfList[1]
names(dfList)
plot_battery_percentage <- function(dfList) {
if(!dir.exists("plots")){
dir.create("plots")
}
for(i in seq_along(dfList)){
df<- dfList[[i]]
df_name <- names(dfList)[i]
p<- ggplot(df, aes(x= datetime, y = logger_battPerc)) +
geom_line() +
labs(title = paste("Battery Percentage ZL6 Pro",i),
x= "Date",
y= "Battery Percentage")+
theme_minimal()+
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA)
)
ggsave(filename = paste0("plots/battery_percentage_plot_",df_name,".png"), plot = p)
}
}
plot_battery_percentage(dfList)
plot_battery_percentage <- function(dfList) {
if(!dir.exists("plots")){
dir.create("plots")
}
for(i in seq_along(dfList)){
df<- dfList[[i]]
df_name <- names(dfList)[i]
p<- ggplot(df, aes(x= datetime, y = logger_battPerc)) +
geom_line() +
labs(title = paste("Battery Percentage ZL6 Pro",df_name),
x= "Date",
y= "Battery Percentage")+
theme_minimal()+
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA)
)
ggsave(filename = paste0("plots/battery_percentage_plot_",df_name,".png"), plot = p)
}
}
plot_battery_percentage(dfList)
plot_battery_percentage <- function(dfList) {
if(!dir.exists("plots")){
dir.create("plots")
}
for(i in seq_along(dfList)){
df<- dfList[[i]]
df_name <- names(dfList)[i]
p<- ggplot(df, aes(x= datetime, y = logger_battPerc)) +
geom_line() +
labs(title = paste("Battery Percentage ZL6 Pro",df_name),
x= "Date",
y= "Battery Percentage")+
theme_minimal()+
theme(
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA)
)
ggsave(filename = paste0("plots/battery_percentage_plot_",df_name,".png"), plot = p, width = 10, height = 5)
}
}
plot_battery_percentage(dfList)
library(readxl)
library(tidyverse)
library(lubridate)
library(sf)
library(mapview)
library(ggplot2)
# Directories
## dir.create will not create/overwrite existing folder if warning shows.
# CHANGE THIS DIRECTORY TO WHEREVER YOU STORED THE TEROS_sensors FILE:
# dir <- "~/projects/DSS/TEROS_sensors/Coweeta/" #Hubbard Brook or Coweeta directories
raw_dir <- paste0(dir, "raw/") #Where raw files are in folders by download date
dir
dir = "C:/Users/Carlos/Documents/GitHub/TEROS_sensors"
raw_dir <- paste0(dir, "raw/") #Where raw files are in folders by download date
library(readxl)
library(tidyverse)
library(lubridate)
library(sf)
library(mapview)
library(ggplot2)
# Directories
## dir.create will not create/overwrite existing folder if warning shows.
# CHANGE THIS DIRECTORY TO WHEREVER YOU STORED THE TEROS_sensors FILE:
# dir <- "~/projects/DSS/TEROS_sensors/Coweeta/" #Hubbard Brook or Coweeta directories
raw_dir <- paste0(dir, "raw/") #Where raw files are in folders by download date
dir.create(file.path(dir, "clean"), showWarnings = TRUE)
clean_dir <- paste0(dir, "clean/") #Clean files by download date
dir.create(file.path(dir, "master"), showWarnings = TRUE)
master_dir <- paste0(dir, "master/") #Clean files by location with all dates appended
# Metadata file structure
## columns needed: loggerID, site, depth_cm, duplicate_depth, serial
meta <- read_csv(paste0(dir,"sensor_metadata.csv"))
dir
dir = "C:/Users/Carlos/Documents/GitHub/TEROS_sensors/Coweeta"
library(readxl)
library(tidyverse)
library(lubridate)
library(sf)
library(mapview)
library(ggplot2)
# Directories
## dir.create will not create/overwrite existing folder if warning shows.
# CHANGE THIS DIRECTORY TO WHEREVER YOU STORED THE TEROS_sensors FILE:
# dir <- "~/projects/DSS/TEROS_sensors/Coweeta/" #Hubbard Brook or Coweeta directories
raw_dir <- paste0(dir, "raw/") #Where raw files are in folders by download date
dir.create(file.path(dir, "clean"), showWarnings = TRUE)
clean_dir <- paste0(dir, "clean/") #Clean files by download date
dir.create(file.path(dir, "master"), showWarnings = TRUE)
master_dir <- paste0(dir, "master/") #Clean files by location with all dates appended
# Metadata file structure
## columns needed: loggerID, site, depth_cm, duplicate_depth, serial
meta <- read_csv(paste0(dir,"sensor_metadata.csv"))
dir = "C:/Users/Carlos/Documents/GitHub/TEROS_sensors/Coweeta/"
library(readxl)
library(tidyverse)
library(lubridate)
library(sf)
library(mapview)
library(ggplot2)
# Directories
## dir.create will not create/overwrite existing folder if warning shows.
# CHANGE THIS DIRECTORY TO WHEREVER YOU STORED THE TEROS_sensors FILE:
# dir <- "~/projects/DSS/TEROS_sensors/Coweeta/" #Hubbard Brook or Coweeta directories
raw_dir <- paste0(dir, "raw/") #Where raw files are in folders by download date
dir.create(file.path(dir, "clean"), showWarnings = TRUE)
clean_dir <- paste0(dir, "clean/") #Clean files by download date
dir.create(file.path(dir, "master"), showWarnings = TRUE)
master_dir <- paste0(dir, "master/") #Clean files by location with all dates appended
# Metadata file structure
## columns needed: loggerID, site, depth_cm, duplicate_depth, serial
meta <- read_csv(paste0(dir,"sensor_metadata.csv"))
points = st_as_sf(meta, coords = c("lon", "lat"), crs = 4326)
# HubbardBrook <- st_read("~/projects/DSS/TEROS_sensors/HubbardBrook/shapefiles/hbef_wsheds.shp")
#Coweeta <- st_read("~/projects/DSS/TEROS_sensors/Coweeta/shapefiles/Coweeta_Hydrologic_Laboratory.shp")
mapview(Coweeta, label = Coweeta$WS) +
mapview(points, label = points$siteID, zcol = "logger", legend = TRUE)
dir
library(readxl)
library(tidyverse)
library(lubridate)
library(sf)
library(mapview)
library(ggplot2)
# Directories
## dir.create will not create/overwrite existing folder if warning shows.
# CHANGE THIS DIRECTORY TO WHEREVER YOU STORED THE TEROS_sensors FILE:
# dir <- "~/projects/DSS/TEROS_sensors/Coweeta/" #Hubbard Brook or Coweeta directories
raw_dir <- paste0(dir, "raw/") #Where raw files are in folders by download date
dir.create(file.path(dir, "clean"), showWarnings = TRUE)
clean_dir <- paste0(dir, "clean/") #Clean files by download date
dir.create(file.path(dir, "master"), showWarnings = TRUE)
master_dir <- paste0(dir, "master/") #Clean files by location with all dates appended
# Metadata file structure
## columns needed: loggerID, site, depth_cm, duplicate_depth, serial
meta <- read_csv(paste0(dir,"sensor_metadata.csv"))
points = st_as_sf(meta, coords = c("lon", "lat"), crs = 4326)
# HubbardBrook <- st_read("~/projects/DSS/TEROS_sensors/HubbardBrook/shapefiles/hbef_wsheds.shp")
#Coweeta <- st_read("~/projects/DSS/TEROS_sensors/Coweeta/shapefiles/Coweeta_Hydrologic_Laboratory.shp")
mapview(Coweeta, label = Coweeta$WS) +
mapview(points, label = points$siteID, zcol = "logger", legend = TRUE)
points = st_as_sf(meta, coords = c("lon", "lat"), crs = 4326)
# HubbardBrook <- st_read("~/projects/DSS/TEROS_sensors/HubbardBrook/shapefiles/hbef_wsheds.shp")
Coweeta <- st_read(paste0(dir,"shapefiles/Coweeta_Hydrologic_Laboratory.shp"))
mapview(Coweeta, label = Coweeta$WS) +
mapview(points, label = points$siteID, zcol = "logger", legend = TRUE)
out = clean_dir
file_list <- list.files(path=raw_dir, full.names = TRUE, recursive = TRUE)
for (i in 1:length(file_list)) {
#Read in the raw data
dat <- read_excel(file_list[i], col_names = FALSE, skip= 3)
#Create a log of logger serial numbers and what it is measuring
smlog <- read_excel(file_list[i], sheet = "Metadata")
loggerID <- subset(smlog, smlog$`Device Name` == "Serial Number")
loggerID <- as.character(loggerID[1,3])
date <- subset(smlog, smlog$`Device Name` == "Logger Time")
date <- as.Date(as.character(date[1,3]), "%m/%d/%y")
mo <- as.character(month(as.POSIXlt(date, format="%d/%m/%Y"), label = T))
yr <- as.character(year(as.POSIXlt(date, format="%d/%m/%Y")))
download_date = paste0(mo, yr)
row <- as.numeric(which(grepl("Sensors", smlog$Configuration)))
smlog <- smlog %>%
slice(row:nrow(smlog)) %>%
filter(`Device Name` %in% c("Port #", "Name", "Serial Num", "Serial Number")) %>%
select(-Configuration)
names(smlog)[1] = "key"
names(smlog)[2] = "value"
smlog[is.na(smlog)] <- "9999"
smlog <- do.call(data.frame, aggregate(. ~ key, smlog, as.vector))
smlog <- as.data.frame(t(smlog))
colnames(smlog) <- smlog[1,]
smlog <- smlog[-1,]
smlog$model <- word(smlog$Name, start = 1, end = 2)
smlog <- smlog  %>%
mutate(meas = if_else(model == "TEROS 21",
list(c("matric_kPa", "matric_temp_C")),
list(c("vwc", "vwc_temp_C", "satext_mScm")))) %>%
unnest(meas)
names(smlog)[3] <- "serial"
#Headers of the datafile
header <- read_excel(file_list[i], col_names = FALSE)
header <- header[c(1:3),]
header <- as.data.frame(t(header))
names(header)[1] = "port"
names(header)[2] = "model"
names(header)[3] = "meas"
#unique(header$meas)
header$meas <- ifelse(header$meas == "Timestamp", "datetime", header$meas)
header$meas <- ifelse(header$meas == "kPa Matric Potential", "matric_kPa", header$meas)
header$meas <- ifelse(header$meas == "°C Soil Temperature" & header$model == "TEROS 12", "vwc_temp_C", header$meas)
header$meas <- ifelse(header$meas == "°C Soil Temperature" & header$model == "TEROS 21", "matric_temp_C", header$meas)
header$meas <- ifelse(header$meas == "m³/m³ Water Content", "vwc", header$meas)
header$meas <- ifelse(header$meas == "mS/cm Saturation Extract EC", "satext_mScm", header$meas)
header$meas <- ifelse(header$meas == "mS/cm Bulk EC", "satext_mScm", header$meas)
header$meas <- ifelse(header$meas == "% Battery Percent",  paste0("logger", "_", "battPerc"), header$meas)
header$meas <- ifelse(header$meas == "mV Battery Voltage",  paste0("logger", "_", "battVolt"), header$meas)
header$meas <- ifelse(header$meas == "kPa Reference Pressure",  paste0("logger", "_", "refPress"), header$meas)
header$meas <- ifelse(header$meas == "°C Logger Temperature",  paste0("logger", "_", "tempC"), header$meas)
#join metadata with smlog to get depths of the sensors
metaL <- meta
metaL <- metaL %>% filter(logger == loggerID)
#Site id
site <- as.character(na.omit(unique(metaL$siteID)))
my_cols <- c("depth_cm", "duplicate_depth")
metaL$dup_depth <- do.call(paste, c(metaL[my_cols], sep = ""))
metaL <- metaL %>% select(siteID, logger, serial, dup_depth)
smlog <- left_join(smlog, metaL, by = "serial")
names(smlog)[2] = "port"
smlog$port <- as.numeric(smlog$port)
#port
header$port <- as.numeric(str_extract(header$port, "\\d"))
header$port <- ifelse(header$meas == "datetime", NA, header$port)
#join log with header information
header <- left_join(header, smlog, by = c("port", "meas"))
my_cols <- c("meas", "dup_depth")
header$colnames <- do.call(paste, c(header[my_cols], sep = "_"))
header$colnames <- gsub("_NA", "",header$colname)
header$colnames <- gsub("NA", "",header$colname)
#Change the column names and write out
colnames <- header$colnames
names(dat) <- c(colnames)
write.csv(dat, paste0(out, site, "_", download_date, ".csv"))
}
read = clean_dir
out = master_dir
file_prefix <- unique(sapply(list.files(path=read, recursive = TRUE, full.names = FALSE, pattern = "*.csv"), substr, 1, 5))
file_prefix
file_prefix <- as.character(strsplit(file_prefix,"_"))
file_prefix
# NAMED LIST OF ROW-BINDED DATAFRAMES
dfList <- sapply(file_prefix, function(p){
dfs <- lapply(list.files(path=read,
pattern=p, full.names=TRUE), function(f) {
read.csv(f)
})
do.call(rbind, dfs)
}, simplify=FALSE)
#remove duplicate rows, if whole downloads were made multiple times
dfList <- lapply(dfList, function(x) x[!duplicated(x["datetime"]), ])
#format datetime column
dfList <- lapply(dfList, transform, datetime = as.POSIXct(datetime, format = "%Y-%m-%d %H:%M:%S"))
## remove erroneous date values by filtering out dates past today
dfList <- lapply(dfList, function(df) df[df$datetime <= Sys.Date(),])
for(i in 1:length(dfList)){
write.csv(dfList[[i]], paste0(out ,names(dfList)[i], ".csv"), row.names = FALSE)
}
read = master_dir
file_prefix <- unique(sapply(list.files(path=read, recursive = TRUE, full.names = FALSE, pattern = "*.csv"), substr, 1, 5))
file_prefix
file_prefix <- str_replace(file_prefix, "([.])", "")
file_prefix
dfList <- sapply(file_prefix, function(p){
dfs <- lapply(list.files(path=read,
pattern=p, full.names=TRUE), function(f) {
read.csv(f)
})
do.call(rbind, dfs)
}, simplify=FALSE)
#format datetime column
dfList <- lapply(dfList, transform, datetime = as.POSIXct(datetime, format = "%Y-%m-%d %H:%M:%S"))
points = st_as_sf(meta, coords = c("lon", "lat"), crs = 4326)
# HubbardBrook <- st_read("~/projects/DSS/TEROS_sensors/HubbardBrook/shapefiles/hbef_wsheds.shp")
Coweeta <- st_read(paste0(dir,"shapefiles/Coweeta_Hydrologic_Laboratory.shp")
mapview(Coweeta, label = Coweeta$WS) +
dir
points = st_as_sf(meta, coords = c("lon", "lat"), crs = 4326)
# HubbardBrook <- st_read("~/projects/DSS/TEROS_sensors/HubbardBrook/shapefiles/hbef_wsheds.shp")
Coweeta <- st_read(paste0(dir,"shapefiles/Coweeta_Hydrologic_Laboratory.shp")
mapview(Coweeta, label = Coweeta$WS) +
library(readxl)
library(tidyverse)
library(lubridate)
library(sf)
library(mapview)
library(ggplot2)
# Directories
## dir.create will not create/overwrite existing folder if warning shows.
# CHANGE THIS DIRECTORY TO WHEREVER YOU STORED THE TEROS_sensors FILE:
# dir <- "~/projects/DSS/TEROS_sensors/Coweeta/" #Hubbard Brook or Coweeta directories
raw_dir <- paste0(dir, "raw/") #Where raw files are in folders by download date
dir.create(file.path(dir, "clean"), showWarnings = TRUE)
clean_dir <- paste0(dir, "clean/") #Clean files by download date
dir.create(file.path(dir, "master"), showWarnings = TRUE)
master_dir <- paste0(dir, "master/") #Clean files by location with all dates appended
# Metadata file structure
## columns needed: loggerID, site, depth_cm, duplicate_depth, serial
meta <- read_csv(paste0(dir,"sensor_metadata.csv"))
points = st_as_sf(meta, coords = c("lon", "lat"), crs = 4326)
# HubbardBrook <- st_read("~/projects/DSS/TEROS_sensors/HubbardBrook/shapefiles/hbef_wsheds.shp")
Coweeta <- st_read(paste0(dir,"shapefiles/Coweeta_Hydrologic_Laboratory.shp")
mapview(Coweeta, label = Coweeta$WS) +
Coweeta
mapview(Coweeta, label = Coweeta$WS) +
mapview(points, label = points$siteID, zcol = "logger", legend = TRUE)
points = st_as_sf(meta, coords = c("lon", "lat"), crs = 4326)
# HubbardBrook <- st_read("~/projects/DSS/TEROS_sensors/HubbardBrook/shapefiles/hbef_wsheds.shp")
Coweeta <- st_read(paste0(dir,"shapefiles/Coweeta_Hydrologic_Laboratory.shp")
{mapview(Coweeta, label = Coweeta$WS) +
points = st_as_sf(meta, coords = c("lon", "lat"), crs = 4326)
# HubbardBrook <- st_read("~/projects/DSS/TEROS_sensors/HubbardBrook/shapefiles/hbef_wsheds.shp")
Coweeta <- st_read(paste0(dir,"shapefiles/Coweeta_Hydrologic_Laboratory.shp")
mapview(Coweeta, label = Coweeta$WS) +
points = st_as_sf(meta, coords = c("lon", "lat"), crs = 4326)
# HubbardBrook <- st_read("~/projects/DSS/TEROS_sensors/HubbardBrook/shapefiles/hbef_wsheds.shp")
Coweeta <- st_read(paste0(dir,"shapefiles/Coweeta_Hydrologic_Laboratory.shp"))
mapview(Coweeta, label = Coweeta$WS) +
mapview(points, label = points$siteID, zcol = "logger", legend = TRUE)
out = clean_dir
file_list <- list.files(path=raw_dir, full.names = TRUE, recursive = TRUE)
for (i in 1:length(file_list)) {
#Read in the raw data
dat <- read_excel(file_list[i], col_names = FALSE, skip= 3)
#Create a log of logger serial numbers and what it is measuring
smlog <- read_excel(file_list[i], sheet = "Metadata")
loggerID <- subset(smlog, smlog$`Device Name` == "Serial Number")
loggerID <- as.character(loggerID[1,3])
date <- subset(smlog, smlog$`Device Name` == "Logger Time")
date <- as.Date(as.character(date[1,3]), "%m/%d/%y")
mo <- as.character(month(as.POSIXlt(date, format="%d/%m/%Y"), label = T))
yr <- as.character(year(as.POSIXlt(date, format="%d/%m/%Y")))
download_date = paste0(mo, yr)
row <- as.numeric(which(grepl("Sensors", smlog$Configuration)))
smlog <- smlog %>%
slice(row:nrow(smlog)) %>%
filter(`Device Name` %in% c("Port #", "Name", "Serial Num", "Serial Number")) %>%
select(-Configuration)
names(smlog)[1] = "key"
names(smlog)[2] = "value"
smlog[is.na(smlog)] <- "9999"
smlog <- do.call(data.frame, aggregate(. ~ key, smlog, as.vector))
smlog <- as.data.frame(t(smlog))
colnames(smlog) <- smlog[1,]
smlog <- smlog[-1,]
smlog$model <- word(smlog$Name, start = 1, end = 2)
smlog <- smlog  %>%
mutate(meas = if_else(model == "TEROS 21",
list(c("matric_kPa", "matric_temp_C")),
list(c("vwc", "vwc_temp_C", "satext_mScm")))) %>%
unnest(meas)
names(smlog)[3] <- "serial"
#Headers of the datafile
header <- read_excel(file_list[i], col_names = FALSE)
header <- header[c(1:3),]
header <- as.data.frame(t(header))
names(header)[1] = "port"
names(header)[2] = "model"
names(header)[3] = "meas"
#unique(header$meas)
header$meas <- ifelse(header$meas == "Timestamp", "datetime", header$meas)
header$meas <- ifelse(header$meas == "kPa Matric Potential", "matric_kPa", header$meas)
header$meas <- ifelse(header$meas == "°C Soil Temperature" & header$model == "TEROS 12", "vwc_temp_C", header$meas)
header$meas <- ifelse(header$meas == "°C Soil Temperature" & header$model == "TEROS 21", "matric_temp_C", header$meas)
header$meas <- ifelse(header$meas == "m³/m³ Water Content", "vwc", header$meas)
header$meas <- ifelse(header$meas == "mS/cm Saturation Extract EC", "satext_mScm", header$meas)
header$meas <- ifelse(header$meas == "mS/cm Bulk EC", "satext_mScm", header$meas)
header$meas <- ifelse(header$meas == "% Battery Percent",  paste0("logger", "_", "battPerc"), header$meas)
header$meas <- ifelse(header$meas == "mV Battery Voltage",  paste0("logger", "_", "battVolt"), header$meas)
header$meas <- ifelse(header$meas == "kPa Reference Pressure",  paste0("logger", "_", "refPress"), header$meas)
header$meas <- ifelse(header$meas == "°C Logger Temperature",  paste0("logger", "_", "tempC"), header$meas)
#join metadata with smlog to get depths of the sensors
metaL <- meta
metaL <- metaL %>% filter(logger == loggerID)
#Site id
site <- as.character(na.omit(unique(metaL$siteID)))
my_cols <- c("depth_cm", "duplicate_depth")
metaL$dup_depth <- do.call(paste, c(metaL[my_cols], sep = ""))
metaL <- metaL %>% select(siteID, logger, serial, dup_depth)
smlog <- left_join(smlog, metaL, by = "serial")
names(smlog)[2] = "port"
smlog$port <- as.numeric(smlog$port)
#port
header$port <- as.numeric(str_extract(header$port, "\\d"))
header$port <- ifelse(header$meas == "datetime", NA, header$port)
#join log with header information
header <- left_join(header, smlog, by = c("port", "meas"))
my_cols <- c("meas", "dup_depth")
header$colnames <- do.call(paste, c(header[my_cols], sep = "_"))
header$colnames <- gsub("_NA", "",header$colname)
header$colnames <- gsub("NA", "",header$colname)
#Change the column names and write out
colnames <- header$colnames
names(dat) <- c(colnames)
write.csv(dat, paste0(out, site, "_", download_date, ".csv"))
}
read = clean_dir
out = master_dir
file_prefix <- unique(sapply(list.files(path=read, recursive = TRUE, full.names = FALSE, pattern = "*.csv"), substr, 1, 5))
file_prefix
file_prefix <- as.character(strsplit(file_prefix,"_"))
file_prefix
# NAMED LIST OF ROW-BINDED DATAFRAMES
dfList <- sapply(file_prefix, function(p){
dfs <- lapply(list.files(path=read,
pattern=p, full.names=TRUE), function(f) {
read.csv(f)
})
do.call(rbind, dfs)
}, simplify=FALSE)
#remove duplicate rows, if whole downloads were made multiple times
dfList <- lapply(dfList, function(x) x[!duplicated(x["datetime"]), ])
#format datetime column
dfList <- lapply(dfList, transform, datetime = as.POSIXct(datetime, format = "%Y-%m-%d %H:%M:%S"))
## remove erroneous date values by filtering out dates past today
dfList <- lapply(dfList, function(df) df[df$datetime <= Sys.Date(),])
for(i in 1:length(dfList)){
write.csv(dfList[[i]], paste0(out ,names(dfList)[i], ".csv"), row.names = FALSE)
}
read = master_dir
file_prefix <- unique(sapply(list.files(path=read, recursive = TRUE, full.names = FALSE, pattern = "*.csv"), substr, 1, 5))
file_prefix
file_prefix <- str_replace(file_prefix, "([.])", "")
file_prefix
dfList <- sapply(file_prefix, function(p){
dfs <- lapply(list.files(path=read,
pattern=p, full.names=TRUE), function(f) {
read.csv(f)
})
do.call(rbind, dfs)
}, simplify=FALSE)
#format datetime column
dfList <- lapply(dfList, transform, datetime = as.POSIXct(datetime, format = "%Y-%m-%d %H:%M:%S"))
test <- dfList$Cw32C
#plot
plot(test$datetime, test$vwc_79, type = "p", pch=20)
##ggplot VWC
ggplot(test, aes(x= datetime))+
geom_line(aes(y= vwc_79), color = "black")+
geom_line(aes(y= vwc_50a), color = "#d7191c")+
geom_line(aes(y= vwc_50b), color = "#e66101")+
geom_line(aes(y= vwc_15), color = "#2c7bb6")+
xlab("Date")+
ylab("Volumetric Water Content")+
ggtitle("VWC CW32C")+
theme_minimal()
##ggplot MP
ggplot(test, aes(x= datetime, y = matric_kPa_79))+
geom_line()+
geom_line(aes(y= matric_kPa_15), color = "#d7191c")+
xlab("Date")+
ylab("kPa")+
ggtitle("Matric Potential CW32C")+
theme_minimal()
##ggplot Soil Temperature
ggplot(test, aes(x= datetime))+
geom_line(aes(y= matric_temp_C_79), color = "green")+
geom_line(aes(y= vwc_temp_C_79), color = "black")+
geom_line(aes(y= vwc_temp_C_50a), color = "#d7191c")+
geom_line(aes(y= vwc_temp_C_50b), color = "#e66101")+
geom_line(aes(y= matric_temp_C_15), color = "#2c7bb6")+
geom_line(aes(y= vwc_temp_C_15), color = "blue")+
xlab("Date")+
ylab("°C")+
ggtitle("Soil Temperature CW32C")+
theme_minimal()
##ggplot Battery Status
ggplot(test, aes(x= datetime))+
geom_line(aes(y=logger_battPerc))+
xlab("Date")+
ylab("Battery Percentage")+
ggtitle("Battery CW32C")+
theme_minimal()
read = master_dir
file_prefix <- unique(sapply(list.files(path=read, recursive = TRUE, full.names = FALSE, pattern = "*.csv"), substr, 1, 5))
file_prefix
file_prefix <- str_replace(file_prefix, "([.])", "")
file_prefix
dfList <- sapply(file_prefix, function(p){
dfs <- lapply(list.files(path=read,
pattern=p, full.names=TRUE), function(f) {
read.csv(f)
})
do.call(rbind, dfs)
}, simplify=FALSE)
#format datetime column
dfList <- lapply(dfList, transform, datetime = as.POSIXct(datetime, format = "%Y-%m-%d %H:%M:%S"))
dfList
